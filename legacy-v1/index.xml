<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Legacy-v1s on MongoDB C&#43;&#43; Driver Manual</title>
    <link>http://mongodb.github.io/docs-cxx/legacy-v1/</link>
    <description>Recent content in Legacy-v1s on MongoDB C&#43;&#43; Driver Manual</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Aug 2016 16:11:58 +0530</lastBuildDate>
    <atom:link href="http://mongodb.github.io/docs-cxx/legacy-v1/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Breaking changes from 26compat</title>
      <link>http://mongodb.github.io/docs-cxx/legacy-v1/breaking-changes/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>http://mongodb.github.io/docs-cxx/legacy-v1/breaking-changes/</guid>
      <description>

&lt;p&gt;The 26compat release series tracks the server 2.6 releases one-to-one. As a
result, it receives only bugfixes and small updates necessary to keep it
building in isolation.&lt;/p&gt;

&lt;p&gt;The legacy release series, on the other hand, is a permanent and diverging
fork. Our philosophy is to keep the legacy branch as close to the 26compat
branch as is reasonable, but that when weighing new features against
compatibility, we will choose new features. As a result the legacy branch
is not 100% source compatible with the 26compat branch.&lt;/p&gt;

&lt;p&gt;This page attempts to serve as a transition guide for those users looking
to migrate from the 26compat branch to the legacy branch. Note that it does
&lt;em&gt;not&lt;/em&gt; discuss new features in detail and simply points to the per-release
notes.&lt;/p&gt;

&lt;h1 id=&#34;breaking-changes&#34;&gt;Breaking Changes&lt;/h1&gt;

&lt;h2 id=&#34;changes-to-the-build-system&#34;&gt;Changes to the build system&lt;/h2&gt;

&lt;p&gt;Scons targets have been renamed to more &amp;lsquo;obvious&amp;rsquo; names, and some unused or
unneeded targets have been removed.&lt;/p&gt;

&lt;h3 id=&#34;cheat-sheet&#34;&gt;cheat sheet&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Scons Target&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;compile driver&lt;/td&gt;
&lt;td&gt;&lt;code&gt;driver&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;install driver&lt;/td&gt;
&lt;td&gt;&lt;code&gt;install&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;check driver install (used internally)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;check-install&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;build unit tests&lt;/td&gt;
&lt;td&gt;&lt;code&gt;build-unit&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;run unit tests&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unit&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;build integration tests&lt;/td&gt;
&lt;td&gt;&lt;code&gt;build-integration&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;run integration tests&lt;/td&gt;
&lt;td&gt;&lt;code&gt;integration&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;build client examples&lt;/td&gt;
&lt;td&gt;&lt;code&gt;build-examples&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;run client examples&lt;/td&gt;
&lt;td&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;build everything (driver, unit tests, integration tests, examples&lt;/td&gt;
&lt;td&gt;&lt;code&gt;all&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;run all tests and client examples&lt;/td&gt;
&lt;td&gt;&lt;code&gt;test&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;details&#34;&gt;Details&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/10gen/mongo-orchestration&#34;&gt;&lt;code&gt;mongo-orchestration&lt;/code&gt;&lt;/a&gt; is now required to run the driver&amp;rsquo;s test suite. Please see the repository for instructions how to install and run &lt;code&gt;mongo-orchestration&lt;/code&gt;. If you are not running tests, simply allow scons to time out when it looks for an instance of &lt;code&gt;mongo-orchestration&lt;/code&gt; at the start of a build.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;driver&lt;/code&gt; target has been created to built the client library without installing it&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;install-mongoclient&lt;/code&gt; target has been renamed to &lt;code&gt;install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unit tests are now built with &lt;code&gt;build-unit&lt;/code&gt;, and run with &lt;code&gt;unit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integration tests are now built with &lt;code&gt;build-integration&lt;/code&gt;, and run with &lt;code&gt;integration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Examples are now built with &lt;code&gt;build-examples&lt;/code&gt;, and run with &lt;code&gt;examples&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;On OSX the &lt;code&gt;--osx-version-min&lt;/code&gt; flag will now default to the current OSX version&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;--full&lt;/code&gt; flag is no longer required, and it is an error to specify it.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;--d&lt;/code&gt; and &lt;code&gt;--dd&lt;/code&gt; flags have been removed. Use the &lt;code&gt;--opt&lt;/code&gt; and &lt;code&gt;--dbg&lt;/code&gt; flags instead.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;--use-system-boost&lt;/code&gt; flag is no longer required, and it is an error to specify it.&lt;/li&gt;
&lt;li&gt;All ABI affecting macros are now defined in a generated &lt;code&gt;config.h&lt;/code&gt; header that is automatically included from &lt;code&gt;dbclient.h&lt;/code&gt; and &lt;code&gt;bson.h&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Many server specific build options (that were unlikely to have been used when building the driver) have been removed.&lt;/li&gt;
&lt;li&gt;The default installation prefix is now &lt;code&gt;build/install&lt;/code&gt;, rather than &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;All build artifacts are now captured under the &lt;code&gt;build&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;changes-to-apis&#34;&gt;Changes to APIs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;mongo::be&lt;/code&gt;, &lt;code&gt;mongo::bo&lt;/code&gt;, and &lt;code&gt;mongo::bob&lt;/code&gt; typedefs for &lt;code&gt;mongo::BSONElement&lt;/code&gt;, &lt;code&gt;mongo::BSONObj&lt;/code&gt; and &lt;code&gt;mongo::BSONObjBuilder&lt;/code&gt; have been removed. We recommend using the fully qualified names in new code.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;mongo::BSONBuilderBase&lt;/code&gt; class has been removed and is no longer a base class of &lt;code&gt;mongo::BSONObjBuilder&lt;/code&gt; or &lt;code&gt;mongo::BSONArrayBuilder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;OpTime&lt;/code&gt; class has been completely removed. It has been replaced by the simplified &lt;code&gt;Timestamp_t&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;globalServerOptions&lt;/code&gt; and &lt;code&gt;globalSSLOptions&lt;/code&gt; objects and their classes have been removed. All driver configuration should be done through the new &lt;code&gt;mongo::client::Options&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;RamLog&lt;/code&gt;, &lt;code&gt;RotatableFileAppender&lt;/code&gt;, and &lt;code&gt;Console&lt;/code&gt; classes have been removed from the logging subsystem.&lt;/li&gt;
&lt;li&gt;In addition, many auxiliary types, functions, and headers that were either unused, or minimally used, have been removed from the distribution.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ensureIndex&lt;/code&gt; and related methods have been removed. The replacement is the new &lt;code&gt;createIndex&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IndexSpec::dropDuplicates()&lt;/code&gt; is now deprecated as it is a no-op in MongoDB 3.0.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;QUERY&lt;/code&gt; macro has been replaced by &lt;code&gt;MONGO_QUERY&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ConnectionString::parse&lt;/code&gt; method now requires it&amp;rsquo;s argument to be in the MongoDB URL (&amp;ldquo;mongodb://&amp;hellip;&amp;ldquo;) format. To use the old format, use the new &lt;code&gt;ConnectionString::parseDeprecated&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ConnectionPool&lt;/code&gt; and &lt;code&gt;ScopedDbConnection&lt;/code&gt; classes have been removed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;behavior-changes&#34;&gt;Behavior Changes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The driver will not function correctly unless &lt;code&gt;mongo::client::initialize&lt;/code&gt; is invoked before using the driver APIs. The mongo::client::shutdown method should also be called at application termination (if options.callShutdownAtExit() is not set) so the driver can cleanly terminate. As a convenience, we have added &lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/blob/legacy/src/mongo/client/init.h#L69&#34;&gt;&lt;code&gt;mongo::GlobalInstance&lt;/code&gt;&lt;/a&gt; as an RAII wrapper to automatically call these methods.&lt;/li&gt;
&lt;li&gt;options.callShutdownAtExit() is a no-op on non-static builds on Windows due to issues around sudden thread termination.&lt;/li&gt;
&lt;li&gt;The driver no longer logs any output by default. You may configure and inject a logger to re-enable logging. See &lt;code&gt;src/mongo/client/examples/clientTest.cpp&lt;/code&gt; for an example of how to enable logging.&lt;/li&gt;
&lt;li&gt;Writes are now &amp;ldquo;&lt;a href=&#34;http://docs.mongodb.org/manual/core/write-concern/#write-concern-acknowledged&#34;&gt;acknowledged&lt;/a&gt;&amp;rdquo; by default. In all previous releases the default write concern was “&lt;a href=&#34;http://docs.mongodb.org/manual/core/write-concern/#unacknowledged&#34;&gt;unacknowledged&lt;/a&gt;”. This change may have performance and behavior implications for existing applications that did not confirm writes. You can read more about the change &lt;a href=&#34;http://docs.mongodb.org/manual/release-notes/drivers-write-concern/#driver-write-concern-change&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The driver now throws a mongo::OperationException when write concern is greater than Acknowledged for errors that occur when running operations against a MongoDB database.&lt;/li&gt;
&lt;li&gt;The default shutdown grace period is now zero which means the driver may block forever until a successful shutdown occurs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;improvements&#34;&gt;Improvements&lt;/h1&gt;

&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/releases&#34;&gt;release
notes&lt;/a&gt; for the
individual legacy branch releases for details on improvements in each
release.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuring the legacy driver</title>
      <link>http://mongodb.github.io/docs-cxx/legacy-v1/configuration/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>http://mongodb.github.io/docs-cxx/legacy-v1/configuration/</guid>
      <description>

&lt;p&gt;In the legacy-0.9 development cycle, the mechanism by which the driver is
configured was refactored. Note that these changes &lt;em&gt;do not apply to
releases on the 26compat branch, or releases pre-dating legacy-0.9.0&lt;/em&gt;.This
page describes the new configuration mechanism and documents the various
configuration options that may be used.&lt;/p&gt;

&lt;h1 id=&#34;configuring-the-driver&#34;&gt;Configuring the Driver&lt;/h1&gt;

&lt;h2 id=&#34;the-mongo-client-initialize-function&#34;&gt;The &lt;code&gt;mongo::client::initialize&lt;/code&gt; function&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;mongo::client::initialize&lt;/code&gt; function, found in file
&lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/blob/legacy/src/mongo/client/init.h&#34;&gt;&lt;code&gt;src/mongo/client/init.h&lt;/code&gt;&lt;/a&gt;
configures the driver and starts background threads critical to the
functioning of the driver. The function has a single parameter receiving a
&lt;code&gt;mongo::client::Options&lt;/code&gt; object. If no value is provided, a default
constructed &lt;code&gt;mongo::client::Options&lt;/code&gt; object is used.&lt;/p&gt;

&lt;p&gt;To configure the driver to use non-default parameters, construct a new
&lt;code&gt;mongo::client::Options&lt;/code&gt; object and use its setter methods to configure the
parameters of interest, and pass this object to
&lt;code&gt;mongo::client::initialize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This method must be called exactly once by your application. Invoke
&lt;code&gt;mongo::client::initialize&lt;/code&gt; as early as possible in your application
startup phase, before any additional threads have been created. You must
examine the return value of &lt;code&gt;mongo::client::initialize&lt;/code&gt; and deal with any
returned error appropriately.&lt;/p&gt;

&lt;h2 id=&#34;the-mongo-client-terminate-function&#34;&gt;The &lt;code&gt;mongo::client::terminate&lt;/code&gt; function&lt;/h2&gt;

&lt;p&gt;When it is time to stop using the client driver, you must terminate its
background tasks and release resources by invoking the
&lt;code&gt;mongo::client::terminate&lt;/code&gt; function, found in file
&lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/blob/legacy/src/mongo/client/init.h&#34;&gt;&lt;code&gt;src/mongo/client/init.h&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;mongo::client::terminate&lt;/code&gt; function honors a grace period, specified in
milliseconds, and defaulting to &amp;lsquo;forever&amp;rsquo;. The shutdown routine will give
background tasks the selected grace period to terminate cleanly. If they do
not do so, &lt;code&gt;mongo::client::terminate&lt;/code&gt; will return an error status. If the
returned error status is &lt;code&gt;ExceededTimeLimit&lt;/code&gt; it is safe to retry the call
to &lt;code&gt;mongo::client::terminate&lt;/code&gt;. Otherwise, a non-OK return status from
&lt;code&gt;mongo::client::terminate&lt;/code&gt; represents a permanent failure to shut down the
driver cleanly. Please see the documentation for &lt;code&gt;mongo::client::terminate&lt;/code&gt;
for additional details. The value of the shutdown grace period may be
changed from its default at driver initialization time by using an
appropriately configured &lt;code&gt;mongo::client::Options&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;On some platforms, you may be able to arrange for
&lt;code&gt;mongo::client::terminate&lt;/code&gt; to be called via an atexit handler. To request
this behavior, see the &lt;code&gt;setCallShutdownAtExit&lt;/code&gt; option, documented below.&lt;/p&gt;

&lt;p&gt;Alternatively, you may use the &lt;code&gt;mongo::client::GlobalInstance&lt;/code&gt; class, found
in
&lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/blob/legacy/src/mongo/client/init.h&#34;&gt;&lt;code&gt;src/mongo/client/init.h&lt;/code&gt;&lt;/a&gt;,
to instantiate an RAII type that will automatically initialize and
terminate the driver.&lt;/p&gt;

&lt;h2 id=&#34;the-mongo-client-options-class&#34;&gt;The &lt;code&gt;mongo::client::Options&lt;/code&gt; class&lt;/h2&gt;

&lt;h3 id=&#34;where-to-find-it&#34;&gt;Where to find it&lt;/h3&gt;

&lt;p&gt;Configuration of the driver is managed through a new class, added in the
&lt;code&gt;legacy-0.9.0&lt;/code&gt; release, called &lt;code&gt;Options&lt;/code&gt;. This class is hosted in the
&lt;code&gt;mongo::client&lt;/code&gt; namespace, and is defined in the header
&lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/blob/legacy/src/mongo/client/options.h&#34;&gt;&lt;code&gt;mongo/client/options.h&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;passing-options-to-mongo-client-initialize&#34;&gt;Passing options to &lt;code&gt;mongo::client::initialize&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;By default, calling &lt;code&gt;mongo::client::initialize()&lt;/code&gt; with no parameters is
equivalent to calling &lt;code&gt;mongo::client::initialize(mongo::client::Options())&lt;/code&gt;
passing a default constructed &lt;code&gt;mongo::client::Options&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Because the &lt;code&gt;mongo::client::Options&lt;/code&gt; class has setters returning a
&lt;code&gt;mongo::client::Options&amp;amp;&lt;/code&gt; you can chain together options to easily
configure them at the call site:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;using mongo::client::initialize;
using mongo::client::Options;

// Configure the mongo C++ client driver, enabling SSL and setting
// the SSL Certificate Authority file to &amp;quot;mycafile&amp;quot;.
Status status = initialize(
    Options().setSSLMode(Options::kSSLRequired).setSSLCAFile(&amp;quot;mycafile&amp;quot;)
);

if (!status.isOK()) {
    // deal with errors
} else {
    // Driver is up in SSL mode.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;available-options&#34;&gt;Available Options&lt;/h3&gt;

&lt;h4 id=&#34;options-callshutdownatexit-and-options-setcallshutdownatexit&#34;&gt;&lt;code&gt;Options::callShutdownAtExit&lt;/code&gt; and &lt;code&gt;Options::setCallShutdownAtExit&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semantics: If this option is &amp;lsquo;true&amp;rsquo;, then a successful call to
&lt;code&gt;mongo::client::initialize&lt;/code&gt; will schedule a call to
&lt;code&gt;mongo::client::terminate&lt;/code&gt; with &lt;code&gt;atexit&lt;/code&gt;. The call to
&lt;code&gt;mongo::client::terminate&lt;/code&gt; will be made with the value of
&lt;code&gt;mongo::client::Options::current::autoShutdownGracePeriodMillis&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-autoshutdowngraceperiodmillis-and-options-setautoshutdowngraceperiodmillis&#34;&gt;&lt;code&gt;Options::autoShutdownGracePeriodMillis&lt;/code&gt; and &lt;code&gt;Options::setAutoShutdownGracePeriodMillis&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;int&lt;/code&gt;, interpreted as milliseconds&lt;/li&gt;
&lt;li&gt;Default: 0 (wait forever)&lt;/li&gt;
&lt;li&gt;Semantics: If &lt;code&gt;mongo::client::initialize&lt;/code&gt; scheduled a call to
&lt;code&gt;mongo::client::terminate&lt;/code&gt; with &lt;code&gt;atexit&lt;/code&gt;, then that call to
&lt;code&gt;mongo::client::terminate&lt;/code&gt; will use the value
&lt;code&gt;Options::autoShutdownGracePeriodMillis&lt;/code&gt; when calling
&lt;code&gt;mongo::client::terminate&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setdefaultlocalthresholdmillis-and-options-defaultlocalthresholdmillis&#34;&gt;&lt;code&gt;Options::setDefaultLocalThresholdMillis&lt;/code&gt; and &lt;code&gt;Options::defaultLocalThresholdMillis&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;int&lt;/code&gt;, interpreted as milliseconds&lt;/li&gt;
&lt;li&gt;Default: 15&lt;/li&gt;
&lt;li&gt;Semantics: TODO&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setsslmode-and-options-sslmode&#34;&gt;&lt;code&gt;Options::setSSLMode&lt;/code&gt; and &lt;code&gt;Options::SSLMode&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: [&lt;code&gt;Options::kSSLEnabled&lt;/code&gt;|&lt;code&gt;Options:kSSLDisabled&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;Options::kSSLDisabled&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semantics: If set to &lt;code&gt;Options:kSSLEnabled&lt;/code&gt; the driver will require SSL
connections to all mongo servers. If disabled, it will not request SSL.
Note that if the servers you are connected to are in SSL required mode,
you may not be able to connect. This value is an enumeration so that we
may later extend it with a &lt;code&gt;kSSLPreferred&lt;/code&gt; option, but that is not
currently implemented.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setfipsmode-and-options-fipsmode&#34;&gt;&lt;code&gt;Options::setFIPSMode&lt;/code&gt; and &lt;code&gt;Options::FIPSMode&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semantics: If true, will attempt to use FIPS-140 validated crypto if
supported by the crypto library currently in use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setsslcafile-and-options-sslcafile&#34;&gt;&lt;code&gt;Options::setSSLCAFile&lt;/code&gt; and &lt;code&gt;Options::SSLCAFile&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;std::string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semantics: This flag only has an effect if &lt;code&gt;Options::current::SSLMode&lt;/code&gt; is
&lt;code&gt;Options::kSSLRequired&lt;/code&gt;. If set, it specifies a file containing the
certificate authority file to use. See the &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/configure-ssl/#set-up-mongod-and-mongos-with-ssl-certificate-and-key&#34;&gt;MongoDB SSL
documentation&lt;/a&gt;
for additional information on the CA file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setsslpemkeyfile-and-options-sslpemkeyfile&#34;&gt;&lt;code&gt;Options::setSSLPemKeyFile&lt;/code&gt; and &lt;code&gt;Options::SSLPEMKeyFile&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;std::string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semantics: This flag only has an effect if &lt;code&gt;Options::current::SSLMode&lt;/code&gt; is
&lt;code&gt;Options::kSSLRequired&lt;/code&gt;. If set, it specifies a file containing the SSL
PEM key file to use. See the &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/configure-ssl/#set-up-mongod-and-mongos-with-ssl-certificate-and-key&#34;&gt;MongoDB SSL
documentation&lt;/a&gt;
for additional information on the PEM key file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setsslpemkeypassword-and-options-sslpemkeypassword&#34;&gt;&lt;code&gt;Options::setSSLPemKeyPassword&lt;/code&gt; and &lt;code&gt;Options::SSLPEMKeyPassword&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;std::string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semantics: This flag only has an effect if &lt;code&gt;Options::current::SSLMode&lt;/code&gt; is
&lt;code&gt;Options::kSSLRequired&lt;/code&gt;, and is only meaningful if a PEM key file has
been set with &lt;code&gt;Options::setSSLPEMKeyFile&lt;/code&gt;. If set, it specifies the
password to be used to decrypt the SSL PEM key file specified with
&lt;code&gt;Options::setSSLPEMKeyFile&lt;/code&gt;. See the &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/configure-ssl/#set-up-mongod-and-mongos-with-ssl-certificate-and-key&#34;&gt;MongoDB SSL
documentation&lt;/a&gt;
for additional information on the PEM key file password.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setsslcrlfile-and-options-sslcrlfile&#34;&gt;&lt;code&gt;Options::setSSLCRLFile&lt;/code&gt; and &lt;code&gt;Options::SSLCRLFile&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;std::string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semantics: This flag only has an effect if &lt;code&gt;Options::current::SSLMode&lt;/code&gt; is
&lt;code&gt;Options::kSSLRequired&lt;/code&gt;. If set, it specifies the file to use as the SSL
certificate revocation list. See the &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/configure-ssl/#set-up-mongod-and-mongos-with-ssl-certificate-and-key&#34;&gt;MongoDB SSL
documentation&lt;/a&gt;
for additional information on the certificate revocation list file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setssallowinvalidcertificates-and-options-sslallowinvalidcertificates&#34;&gt;&lt;code&gt;Options::setSSAllowInvalidCertificates&lt;/code&gt; and &lt;code&gt;Options::SSLAllowInvalidCertificates&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semantics: This flag only has an effect if &lt;code&gt;Options::current::SSLMode&lt;/code&gt; is
&lt;code&gt;Options::kSSLRequired&lt;/code&gt;. Setting this option to &lt;code&gt;true&lt;/code&gt; suppresses
validation of certificates. In other words, invalid certificates will be
accepted.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setlogappenderfactory-and-options-logappenderfactory&#34;&gt;&lt;code&gt;Options::setLogAppenderFactory&lt;/code&gt; and &lt;code&gt;Options::logAppenderFactory&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Options::LogAppenderFactory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default: none&lt;/li&gt;
&lt;li&gt;Semantics: Use &lt;code&gt;setLogAppenderFactory&lt;/code&gt; if you want to configure a custom
appender to listen to the driver&amp;rsquo;s internally logged messages. Setting
such a factory will enable logging and relay logged messages to whatever
appender you provide a factory method for. An example of how to do this
can be found
&lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/blob/legacy/src/mongo/client/examples/loggingTest.cpp&#34;&gt;here&lt;/a&gt;.
You may only configure one appender through startup options.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setminloggedseverity-and-options-minloggedseverity&#34;&gt;&lt;code&gt;Options::setMinLoggedSeverity&lt;/code&gt; and `Options::minLoggedSeverity&amp;rsquo;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;logger::LogSeverity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;LogSeverity::Log()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semantics: When providing a custom log appender (see above) use this to
set the minimum severity level of logged messages. Messages that are of
less importance than the level you provide will not be logged.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;options-setvalidateobjects-and-options-validateobjects&#34;&gt;&lt;code&gt;Options::setValidateObjects&lt;/code&gt; and &lt;code&gt;Options::validateObjects&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semantics: If enabled, the client library will run BSON validation on
data returned from the server to ensure that the returned data is valid
BSON. Note that there is a performance cost to doing so.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;caveats&#34;&gt;Caveats&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You must call &lt;code&gt;mongo::client::initialize&lt;/code&gt; before using the driver. You
may only call &lt;code&gt;mongo::client::initialize&lt;/code&gt; once.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configuration of the driver is global. You may access a &lt;code&gt;const&lt;/code&gt; reference
to the current global configuration state of the driver by calling
&lt;code&gt;mongo::client::Options::current&lt;/code&gt;. If called before entering &lt;code&gt;main&lt;/code&gt;, the
values returned by accessors of the &lt;code&gt;Options&lt;/code&gt; object returned by
&lt;code&gt;Options::current&lt;/code&gt; are indeterminate. If called after &lt;code&gt;main&lt;/code&gt; but before
calling &lt;code&gt;mongo::client::initialize&lt;/code&gt;, a default constructed instance of
the &lt;code&gt;Options&lt;/code&gt; class will be returned. If called after
&lt;code&gt;mongo::client::initialize&lt;/code&gt;, the value returned by &lt;code&gt;Options::current&lt;/code&gt;
will reflect any customized &lt;code&gt;Options&lt;/code&gt; instance passed to
&lt;code&gt;mongo::client::initialize&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configuration of the driver is not synchronized, and you may only invoke
&lt;code&gt;mongo::client::initialize&lt;/code&gt; once. We strongly recommend that you call
&lt;code&gt;mongo::client::initialize&lt;/code&gt; as early as possible in &lt;code&gt;main&lt;/code&gt; or your
application startup code, preferably before creating any additional
threads.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installing the legacy driver</title>
      <link>http://mongodb.github.io/docs-cxx/legacy-v1/installation/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>http://mongodb.github.io/docs-cxx/legacy-v1/installation/</guid>
      <description>

&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-ask-for-help&#34;&gt;&lt;strong&gt;How to ask for Help&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#get-the-source-code&#34;&gt;Get the source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#choose-a-branch&#34;&gt;Choose a branch&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#legacy-branch&#34;&gt;legacy branch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compile-the-driver&#34;&gt;Compile the Driver&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#scons-options-when-compiling-the-c-driver&#34;&gt;SCons options when Compiling the C++ Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#targets&#34;&gt;Targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#client-feature-options&#34;&gt;Client Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#path-options&#34;&gt;Path Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#build-options&#34;&gt;Build Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scons-options&#34;&gt;SCons Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#windows-options&#34;&gt;Windows Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mac-os-x-options&#34;&gt;Mac OS X Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;Download%20and%20Compile#deprecated-options&#34;&gt;Deprecated Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#windows-considerations&#34;&gt;Windows Considerations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-c-driver-compilations&#34;&gt;Example C++ Driver Compilations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#debug-builds&#34;&gt;Debug Builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building-on-windows&#34;&gt;Building on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building-against-the-pre-built-boost-binaries&#34;&gt;Building against the pre-built boost binaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building-a-dll-new-in-version-255&#34;&gt;Building a DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building-multiple-windows-library-variants&#34;&gt;Building multiple Windows library variants&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-the-driver-in-your-application&#34;&gt;Using the driver in your application&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#initialization-and-configuration&#34;&gt;Initialization and Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#client-headers&#34;&gt;Client Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#client-libraries&#34;&gt;Client Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#windows-autolinking&#34;&gt;Windows autolinking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linking-with-the-static-client-library&#34;&gt;Linking with the static client library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-to-ask-for-help&#34;&gt;How to ask for Help&lt;/h3&gt;

&lt;p&gt;If you are having difficulty building the driver after reading the below
instructions, please email the &lt;a href=&#34;https://groups.google.com/forum/#!forum/mongodb-user&#34;&gt;mongodb-user mailing
list&lt;/a&gt; to ask for
help. Please include in your email &lt;strong&gt;all&lt;/strong&gt; of the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The version of the driver you are trying to build (branch or tag).

&lt;ul&gt;
&lt;li&gt;Examples: &lt;em&gt;legacy-1.0.1 tag&lt;/em&gt;, &lt;em&gt;legacy-1.0.2 tag&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Host OS, version, and architecture.

&lt;ul&gt;
&lt;li&gt;Examples: &lt;em&gt;Windows 8 64-bit&lt;/em&gt; x86, &lt;em&gt;Ubuntu 12.04 32-bit x86&lt;/em&gt;, &lt;em&gt;OS X Mavericks&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;C++ Compiler and version.

&lt;ul&gt;
&lt;li&gt;Examples: &lt;em&gt;GCC 4.8.2&lt;/em&gt;, &lt;em&gt;MSVC 2013 Express&lt;/em&gt;, &lt;em&gt;clang 3.4&lt;/em&gt;, &lt;em&gt;XCode 5&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Boost version.

&lt;ul&gt;
&lt;li&gt;Examples: &lt;em&gt;boost 1.55&lt;/em&gt;, &lt;em&gt;boost 1.49&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How boost was built or installed.

&lt;ul&gt;
&lt;li&gt;Examples: &lt;em&gt;apt-get install libboost-all-dev&lt;/em&gt;, &lt;em&gt;built from source&lt;/em&gt;, &lt;em&gt;windows binary install&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If you built boost from source, please include your boost build invocation as well.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The complete SCons invocation.

&lt;ul&gt;
&lt;li&gt;Example: &lt;em&gt;scons -j10 install&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The output of the configure phase of the build. If the configure phase failed (e.g. boost was not found), please attach the contents of the file build/scons/config.log.&lt;/li&gt;
&lt;li&gt;The error you encountered. This may be compiler, SCons, or other output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Failure to include the relevant information will result in additional
round-trip communications to ascertain the necessary details, delaying a
useful response. Here is a made-up example of a help request that provides
the relevant information:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PLEASE NOTE: The build invocation below is incomplete and intentionally
erroneous. Read the section on building against the pre-built boost
binaries under the &amp;ldquo;Building on Windows&amp;rdquo; section to understand what is
wrong here, and the rest of the page to learn about other important options
you will want or need to use when building the driver.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;I&amp;rsquo;m trying to build the legacy-0.9 tag on Windows 8 64-bit, using MSVC
2013. I have the boost 1.55 pre-built Windows binaries for VC12 installed
to D:\local\boost-1.55. When I invoked scons as &lt;code&gt;scons --mute --64
--extrapath=D:\local\boost-1.55&lt;/code&gt;, the configure step will not find the
boost headers. The build gives the following configure output&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Checking whether the C++ compiler works yes
Checking whether the C compiler works yes
Checking if C++ compiler &amp;quot;$CC&amp;quot; is MSVC... yes
Checking if C compiler &amp;quot;cl&amp;quot; is MSVC... yes
Checking if we are using libstdc++... no
WARNING: Cannot disable C++11 features when using MSVC
Checking if we are on a POSIX system... no
Checking for __declspec(thread)... yes
Checking for C++ header file boost/version.hpp... no
Could not find boost headers in include search path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Why can&amp;rsquo;t the build system find the boost headers?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;While collecting this information will take some additional time and
effort, providing it will make it much more likely for your question to
receive a prompt and immediately helpful reply.&lt;/p&gt;

&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/&#34;&gt;Boost&lt;/a&gt; (&amp;gt;= 1.49) # May work with older versions back to 1.41

&lt;ul&gt;
&lt;li&gt;NOTE: On systems offering multiple C++ standard libraries, you must ensure that the standard library
linked into boost matches that linked into the driver.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; (2.x)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scons.org/&#34;&gt;SCons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;get-the-source-code&#34;&gt;Get the Source Code&lt;/h3&gt;

&lt;p&gt;To get a repository that you can build, you can clone the sources, and then
check out the branch or tag that you are interested in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone -b legacy https://github.com/mongodb/mongo-cxx-driver.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, see the
&lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/releases&#34;&gt;releases&lt;/a&gt; page for
downloadable tarball files containing the files associated with each
released tag.&lt;/p&gt;

&lt;h3 id=&#34;choose-a-branch&#34;&gt;Choose a Branch&lt;/h3&gt;

&lt;h4 id=&#34;legacy-branch&#34;&gt;Legacy Branch:&lt;/h4&gt;

&lt;p&gt;Use the &lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/tree/legacy&#34;&gt;legacy&lt;/a&gt; branch if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You are using MongoDB&amp;rsquo;s C++ driver for the first time.&lt;/li&gt;
&lt;li&gt;You had been using 26compat (or the driver inside of the server source) and want to benefit from incremental improvements while having the same overall API.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git checkout legacy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compile-the-driver&#34;&gt;Compile the Driver&lt;/h3&gt;

&lt;p&gt;From the directory where you cloned the code, compile the C++ driver by
running the &lt;code&gt;scons&lt;/code&gt; command. Use the SCons options described in this
section.&lt;/p&gt;

&lt;p&gt;To see the list of all SCons options, run: &lt;code&gt;scons --help&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;scons-options-when-compiling-the-c-driver&#34;&gt;SCons Options when Compiling the C++ Driver&lt;/h4&gt;

&lt;p&gt;Select options as appropriate for your environment. Please note that some
flags may not be available on older versions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important note about C++11/C++14&lt;/strong&gt;: The boost libraries do not offer a
stable ABI across different versions of the C++ standard. As a result, you
must ensure that your application, the C++ driver, and boost are all built
with the same language standard. In particular, if you are building the C++
driver with C++11 enabled, you must also build your application with C++11
enabled, and link against a C++11 compiled boost. Note that on most
systems, the system or package installed boost distribution is &lt;em&gt;not&lt;/em&gt; built
with C++11, and is therefore incompatible with a C++11 build of the legacy
driver.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important note about the C++ standard library&lt;/strong&gt;: Much like the C++11
issues, it is again critical that all three components (your application,
boost, and the C++ driver) be built against the same C++ runtime library.
You cannot mix components that have linked against libc++ with those that
have linked against libstdc++.&lt;/p&gt;

&lt;h5 id=&#34;targets&#34;&gt;Targets&lt;/h5&gt;

&lt;p&gt;There are several targets you can build, but the most common target for users of the library is &lt;code&gt;install&lt;/code&gt;, which will build the driver, and install the driver and headers to the location specified with the &lt;code&gt;--prefix&lt;/code&gt; argument. If no prefix is specified, &lt;code&gt;--prefix&lt;/code&gt; defaults to a directory named &lt;code&gt;build/install&lt;/code&gt; under the current source directory.&lt;/p&gt;

&lt;h5 id=&#34;client-feature-options&#34;&gt;Client Feature Options&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--ssl&lt;/code&gt; Enables SSL support. You will need a compatible version of the SSL libraries available.The default authorization mechanism since MongoDB version 3.0 is &lt;a href=&#34;http://docs.mongodb.org/manual/reference/program/mongo/&#34;&gt;SCRAM-SHA-1&lt;/a&gt;. If you want to use standard MongoDB authentication, you should compile with &amp;ndash;ssl option for SCRAM-SHA-1 mechanism support.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--use-sasl-client&lt;/code&gt; Enables SASL, which MongoDB uses for the Kerberos authentication available on MongoDB Enterprise. You will need a compatible version of the SASL implementation libraries available. The Cyrus SASL libraries are what we test with, and are recommended.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--sharedclient&lt;/code&gt; Builds a shared library version of the client driver alongside the static library. If applicable for your application, prefer using the shared client.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;path-options&#34;&gt;Path Options&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--prefix=&amp;lt;path&amp;gt;&lt;/code&gt; The directory prefix for the installation directory. Set &lt;path&gt; to the directory where you want the build artifacts (headers and library files) installed. For example, you might set &lt;path&gt; to &lt;code&gt;/opt/local&lt;/code&gt;, &lt;code&gt;/usr/local&lt;/code&gt;, or &lt;code&gt;$HOME/mongo-client-install&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--libpath=&amp;lt;path-to-libs&amp;gt;&lt;/code&gt; Specifies path to additional libraries.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cpppath=&amp;lt;path-to-headers&amp;gt;&lt;/code&gt; Specifies path to additional headers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--extrapath=&amp;lt;path-to-boost&amp;gt;&lt;/code&gt; Specifies the path to your Boost libraries if they are not in a standard search path for your toolchain.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--runtime-library-search-path&lt;/code&gt; Specifies the runtime search path for dynamic libraries when running tests. Set this to the directory containing boost, ssl, or sasl DLLs as required.

&lt;ul&gt;
&lt;li&gt;NOTE: This option is only available on the &lt;code&gt;legacy&lt;/code&gt; branch at version legacy-0.10.0-pre or later. Prior to legacy-rc1, this option is available under the older &lt;code&gt;--dllpath&lt;/code&gt; name.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;build-options&#34;&gt;Build Options&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--cc&lt;/code&gt; The compiler to use for C. Use the following syntax: &lt;code&gt;--cc=&amp;lt;path-to-c-compiler&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cxx&lt;/code&gt; The compiler to use for C++. Use the following syntax: &lt;code&gt;--cxx=&amp;lt;path-to-c++-compiler&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dbg=[on|off]&lt;/code&gt; Enables runtime debugging checks. Defaults to off. Specifying &lt;code&gt;--dbg=on&lt;/code&gt; implies &lt;code&gt;--opt=off&lt;/code&gt; unless explicitly overridden with &lt;code&gt;--opt=on&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--opt=[on|off]&lt;/code&gt; Enables compile-time optimization. Defaults to on. Can be freely mixed with the values for the &lt;code&gt;--dbg&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--c++11=[on|off]&lt;/code&gt; Builds the driver in C++11 mode. Defaults to off. Please see the note above about requirements for using C++11.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--libc++&lt;/code&gt; Builds the driver against the libc++ C++ runtime library. Please see the note above about requirements for the C++ runtime library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;scons-options&#34;&gt;Scons Options&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--cache&lt;/code&gt; Enables caching of object files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-j N&lt;/code&gt; Compile with N cores.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;windows-options&#34;&gt;Windows Options&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--dynamic-windows&lt;/code&gt; By default, on Windows, compilation uses &lt;code&gt;/MT&lt;/code&gt;. Use this flag to compile with &lt;code&gt;/MD&lt;/code&gt;. Note that &lt;code&gt;/MD&lt;/code&gt; is required to build the shared client on Windows. Also note that your application compiler flags must match. If you build with &lt;code&gt;--dbg=on&lt;/code&gt;, &lt;code&gt;/MTd&lt;/code&gt; or &lt;code&gt;/MDd&lt;/code&gt; will be used in place of &lt;code&gt;/MT&lt;/code&gt; or &lt;code&gt;/MD&lt;/code&gt;, respectively.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dynamic-boost=[on|off|auto]&lt;/code&gt; Selects whether to link the driver to the boost libraries dynamically, statically, or as dynamic iff &lt;code&gt;--dynamic-windows&lt;/code&gt; is enabled, respectively.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--win-version-min&lt;/code&gt; Override the default build system choice of minimum windows version to target. Allowable options are currently &lt;code&gt;xpsp3&lt;/code&gt;, &lt;code&gt;ws03sp2&lt;/code&gt;, &lt;code&gt;vista&lt;/code&gt;, &lt;code&gt;ws08r2&lt;/code&gt;, &lt;code&gt;win7&lt;/code&gt;, and &lt;code&gt;win8&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--msvc-host-arch&lt;/code&gt; Override the detected host architecture. The allowable choices are &lt;code&gt;x86&lt;/code&gt;, &lt;code&gt;i386&lt;/code&gt;, &lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;emt64&lt;/code&gt;, &lt;code&gt;x86_64&lt;/code&gt;, and &lt;code&gt;ia64&lt;/code&gt;. You should only need to use this if the auto-detected host architecture selects a compiler variant that is not available on your system.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--msvc-script=[&amp;lt;path&amp;gt;]&lt;/code&gt; Explicitly selects an MSVC configuration script to run. This may allow you to use MSVC toolchain versions for which your version of SCons does not offer support. You may also pass the empty string to inhibit SCons execution of any MSVC configuration scrip to run. This is useful if you have a &amp;ldquo;dressed&amp;rdquo; MSVC shell that you prefer to use. In this case, you will also need to pass the &lt;code&gt;--propagate-shell-environment&lt;/code&gt; flag to the build so that the shell environment variables are passed down to the tool invocation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--msvc-version&lt;/code&gt; Explicitly select the MSVC version. This is useful if you have multiple toolchains installed. By default SCons will select the newest. If you need to run an older toolchain, you may override with this flag. Please be aware that the value passed here is the VC version (like 10.0, 11.0, 12.0, etc.), not the VS version (2010, 2012, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;mac-os-x-options-mac-os-x-only&#34;&gt;Mac OS X Options (Mac OS X Only)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--osx-version-min=[10.7|10.8|10.9]&lt;/code&gt; Minimum version of Mac OS X to build for. Use &lt;code&gt;--osx-version-min=10.9&lt;/code&gt; when compiling on OS X 10.9 Mavericks to automatically select &lt;code&gt;libc++&lt;/code&gt; as the default runtime library, which is necessary if the prerequisite libraries (e.g. Boost) are built against &lt;code&gt;libc++&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;windows-considerations&#34;&gt;Windows Considerations&lt;/h4&gt;

&lt;p&gt;When building on Windows, use of the SCons &lt;code&gt;--dynamic-windows&lt;/code&gt; option can
result in an error unless all libraries and sources for the application use
the same C runtime library. This option builds the driver to link against
the dynamic link C RTL instead of the static C RTL. If the Boost library
being linked against is expecting an &lt;code&gt;/MT&lt;/code&gt; build (static C RTL), this can
result in an error similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error LNK2005: ___ already defined in msvcprt.lib(MSVCP100.dll) libboost_thread-vc100-mt-1_42.lib(thread.obj)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same caveat applies to building with the &amp;ndash;dbg=on flag, which will
select the debug runtime library.&lt;/p&gt;

&lt;p&gt;You may want to define _CRT_SECURE_NO_WARNINGS to avoid warnings on use of
strncpy and such by the MongoDB client code.&lt;/p&gt;

&lt;p&gt;Include the WinSock library in your application: Linker ‣ Input ‣
Additional Dependencies. Add ws2_32.lib.&lt;/p&gt;

&lt;h3 id=&#34;example-c-driver-compilations&#34;&gt;Example C++ Driver Compilations&lt;/h3&gt;

&lt;p&gt;The following are examples of building the C++ driver.&lt;/p&gt;

&lt;p&gt;The following example installs the driver to &lt;code&gt;$HOME/mongo-client-install&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scons --prefix=$HOME/mongo-client-install install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable SSL, add the &lt;code&gt;--ssl&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scons --prefix=$HOME/mongo-client-install --ssl install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable SASL support for use with Kerberos authentication on MongoDB Enterprise, add the &lt;code&gt;--use-sasl-client&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scons --prefix=$HOME/mongo-client-install --use-sasl-client install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To build a shared library version of the driver, along with the normal static library, use the &lt;code&gt;--sharedclient&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scons --prefix=$HOME/mongo-client-install --sharedclient install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use a custom version of boost installed to /dev/boost, use the &lt;code&gt;--extrapath=&amp;lt;path-to-boost&amp;gt;&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scons --prefix=$HOME/mongo-client-install --extrapath=/dev/boost install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To target OS X 10.9 Mavericks (and default to using &lt;code&gt;libc++&lt;/code&gt;), use the &lt;code&gt;--osx-version-min=&amp;lt;version&amp;gt;&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scons --prefix=$HOME/mongo-client-install --osx-version-min=10.9 install
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;debug-builds&#34;&gt;Debug Builds&lt;/h5&gt;

&lt;p&gt;To build a version of the library with debugging enabled, use &lt;code&gt;--dbg=on&lt;/code&gt;.
This turns off optimization, which is on by default. To enable both
debugging and optimization, pass &lt;code&gt;--dbg=on --opt=on&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scons --prefix=$HOME/mongo-client-install --dbg=on --opt=on install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To override the default compiler to a newer GCC installed in &lt;code&gt;/opt/local/gcc-4.8&lt;/code&gt;, use the &lt;code&gt;--cc&lt;/code&gt; and &lt;code&gt;--cxx&lt;/code&gt; options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scons --prefix=$HOME/mongo-client-install --cc=&amp;lt;path-to-gcc&amp;gt; --cxx=&amp;lt;path-to-g++&amp;gt; install
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;building-on-windows&#34;&gt;Building on Windows&lt;/h5&gt;

&lt;h6 id=&#34;building-against-the-pre-built-boost-binaries&#34;&gt;Building against the pre-built boost binaries.&lt;/h6&gt;

&lt;p&gt;Building boost from source can be challenging on Windows. If appropriate for your situation, we recommend using the &lt;a href=&#34;http://sourceforge.net/projects/boost/files/boost-binaries/&#34;&gt;pre built boost Windows binaries&lt;/a&gt;. Please note that you must select a download that properly reflects your target architecture (i.e. 32-bit or 64-bit) and toolchain revision (MSVC 10, 11, etc. Note that this is the VC version &lt;strong&gt;not&lt;/strong&gt; the Visual Studio version).&lt;/p&gt;

&lt;p&gt;Due to the layout of the boost installation in the pre-built binaries, you cannot use the &lt;code&gt;--extrapath&lt;/code&gt; SCons flag to inform the build of the installation path for the boost binaries. Instead, you should use the &lt;code&gt;--cpppath&lt;/code&gt; flag to point to the root of the chosen boost installation path, and &lt;code&gt;--libpath&lt;/code&gt; to point into the appropriately named library subdirectory of the boost installation. For example, if you have installed the 64-bit boost 1.55 libraries for MSVC11 into &lt;code&gt;D:\local\boost_1_55_0_msvc11&lt;/code&gt;, then you would add&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--cpppath=d:\local\boost_1_55_0_msvc --libpath=d:\local\boost_1_55_0_msvc11\lib64-msvc-11.0
````

to your SCons invocation.

###### Building a DLL (New in version 2.5.5)

```sh
scons
    &amp;lt;--64 or --32&amp;gt;
    --sharedclient
    --dynamic-windows
    --prefix=&amp;lt;install-path&amp;gt;
    --cpppath=&amp;lt;path-to-boost-headers&amp;gt;
    --libpath=&amp;lt;path-to-boost-libs&amp;gt;
    install
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;the-following-example-will-build-and-install-the-c-driver-in-a-powershell&#34;&gt;The following example will build and install the C++ driver, in a PowerShell:&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scons
    --64
    --sharedclient
    --dynamic-windows
    --prefix=&amp;quot;%HOME%\mongo-client-install&amp;quot;
    --cpppath=&amp;quot;C:\local\boost_1_55_0\include&amp;quot;
    --libpath=&amp;quot;C:\local\boost_1_55_0\lib64-msvc-12.0&amp;quot;
    install
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;building-multiple-windows-library-variants&#34;&gt;Building multiple Windows library variants:&lt;/h6&gt;

&lt;p&gt;As of legacy-0.8, the Windows libraries are now tagged with boost-like ABI tags (see &lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/more/getting_started/windows.html#library-naming&#34;&gt;http://www.boost.org/doc/libs/1_55_0/more/getting_started/windows.html#library-naming&lt;/a&gt;), so it is possible to build several different variants (debug vs retail, static vs dynamic runtime) and install them to the same location. We have added support for autolib, so the selection of the appropriate library is handled automatically (see &lt;a href=&#34;https://jira.mongodb.org/browse/CXX-200&#34;&gt;https://jira.mongodb.org/browse/CXX-200&lt;/a&gt;). To build all of the different driver variants, repeatedly invoke scons as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scons $ARGS install
scons $ARGS install --dbg=on
scons $ARGS install --dynamic-windows --sharedclient
scons $ARGS install --dynamic-windows --sharedclient --dbg=on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;$ARGS&lt;/code&gt; are the arguments you would normally pass (e.g. &lt;code&gt;--cpppath&lt;/code&gt;, &lt;code&gt;--libpath&lt;/code&gt;, &lt;code&gt;--64&lt;/code&gt;, &lt;code&gt;--prefix&lt;/code&gt;, etc.). You should ensure that you use the same arguments for all four invocations. If this works properly, your &lt;code&gt;$PREFIX/lib&lt;/code&gt; directory should contain the following files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;libmongoclient.lib
libmongoclient-gd.lib
libmongoclient-s.lib
libmongoclient-sgd.lib
mongoclient.dll
mongoclient.exp
mongoclient.lib
mongoclient.pdb
mongoclient-gd.dll
mongoclient-gd.exp
mongoclient-gd.lib
mongoclient-gd.pdb
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-the-driver-in-your-application&#34;&gt;Using the driver in your application&lt;/h3&gt;

&lt;h4 id=&#34;initialization-and-configuration&#34;&gt;Initialization and Configuration&lt;/h4&gt;

&lt;p&gt;NOTE: You &lt;em&gt;must&lt;/em&gt; initialize the legacy driver before use.  See
&lt;a href=&#34;http://mongodb.github.io/docs-cxx/legacy-v1/configuration/&#34;&gt;Configuration&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h4 id=&#34;client-headers&#34;&gt;Client Headers&lt;/h4&gt;

&lt;p&gt;There are only two headers intended for direct inclusion by consumers of the library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$PREFIX/include/mongo/bson/bson.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$PREFIX/include/mongo/client/dbclient.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These &amp;lsquo;facade&amp;rsquo; headers should include all of the headers necessary to use
the driver or BSON library. Directly including other headers from
&lt;code&gt;$PREFIX/include/mongo/&lt;/code&gt; is unlikely to work as intended and may lead to
subtle or hard to diagnose problems.&lt;/p&gt;

&lt;p&gt;To consume the headers, you must configure your build system so that
&lt;code&gt;$PREFIX/include&lt;/code&gt; is incorporated into the header search path. For
GCC-esque compilers, this is typically done with the &lt;code&gt;-I&lt;/code&gt; flag. For IDEs,
consult the relevant documentation on how to configure the header search
path for your project.&lt;/p&gt;

&lt;h4 id=&#34;client-libraries&#34;&gt;Client Libraries&lt;/h4&gt;

&lt;p&gt;Depending on how you built the driver, you may end up with a static
library, a dynamic library, or both. On Windows, you may end up with many
libraries with different names.&lt;/p&gt;

&lt;p&gt;To link with the library, you must configure your build system so that
&lt;code&gt;$PREFIX/lib&lt;/code&gt; is incorporated into the link-time library search path. For
GCC-esque compilers, this is typically done with the &lt;code&gt;-L&lt;/code&gt; flag. For IDEs,
consult the relevant documentation on how to configure the library search
path for your project.&lt;/p&gt;

&lt;p&gt;Once you have added the search path, you may need to specify the name of
the library you want to link against on your application link line. For GCC
style compilers, this is typically done with the &lt;code&gt;-l&lt;/code&gt; flag. For IDE&amp;rsquo;s,
consult the relevant documentation on how to add libraries to the link
line.&lt;/p&gt;

&lt;h5 id=&#34;windows-autolinking&#34;&gt;Windows autolinking&lt;/h5&gt;

&lt;p&gt;For &lt;code&gt;legacy-0.9.0+&lt;/code&gt; on Windows, the driver off autolib support. In this
case, you do not need to add the client library as a dependent library.
Inclusion of the client headers will register the dependency on the library
and it will automatically be linked. You do still need to specify the
library search path however.&lt;/p&gt;

&lt;h5 id=&#34;linking-with-the-static-client-library&#34;&gt;Linking with the static client library.&lt;/h5&gt;

&lt;p&gt;If you intend to link against the static client library, you must also
define the preprocessor symbol &lt;code&gt;STATIC_LIBMONGOCLIENT&lt;/code&gt; in all translation
units that include the driver or BSON headers. Failure to do so will result
in hard to diagnose warnings or errors.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Legacy driver tutorial</title>
      <link>http://mongodb.github.io/docs-cxx/legacy-v1/tutorial/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>http://mongodb.github.io/docs-cxx/legacy-v1/tutorial/</guid>
      <description>

&lt;h3 id=&#34;getting-started-with-the-legacy-c-driver&#34;&gt;Getting started with the Legacy C++ Driver&lt;/h3&gt;

&lt;p&gt;This is an introduction to usage of the MongoDB database from a C++ program.&lt;/p&gt;

&lt;p&gt;NOTE: this tutorial is for the legacy and 26compat versions of the C++ driver.&lt;/p&gt;

&lt;p&gt;First, install MongoDB – see the
&lt;a href=&#34;http://docs.mongodb.org/manual/installation/&#34;&gt;installation&lt;/a&gt; page for
details.&lt;/p&gt;

&lt;p&gt;Next, you may wish to take a look at the &lt;a href=&#34;http://docs.mongodb.org/manual/&#34;&gt;MongoDB
Manual&lt;/a&gt; for a language independent look at
how to use MongoDB. Also, we suggest some basic familiarity with the &lt;a href=&#34;http://docs.mongodb.org/manual/mongo/&#34;&gt;mongo
shell&lt;/a&gt; – the shell is the primary
database administration tool and is useful for manually inspecting the
contents of a database after your C++ program runs.&lt;/p&gt;

&lt;h3 id=&#34;installing-the-driver-library-and-headers&#34;&gt;Installing the Driver Library and Headers&lt;/h3&gt;

&lt;p&gt;Please see &lt;a href=&#34;http://mongodb.github.io/docs-cxx/legacy-v1/installation/&#34;&gt;Installation&lt;/a&gt; for
instructions on how to download, build, and install the C++ client driver.&lt;/p&gt;

&lt;h3 id=&#34;initializing-the-driver-library&#34;&gt;Initializing the Driver Library&lt;/h3&gt;

&lt;p&gt;Please see &lt;a href=&#34;http://mongodb.github.io/docs-cxx/legacy-v1/configuration/&#34;&gt;Configuration&lt;/a&gt; for
instructions on how to properly initialize and terminate the driver:&lt;/p&gt;

&lt;h3 id=&#34;connecting&#34;&gt;Connecting&lt;/h3&gt;

&lt;h4 id=&#34;dbclientconnection&#34;&gt;DBClientConnection&lt;/h4&gt;

&lt;p&gt;The C++ driver includes several classes for managing collections under the parent class &lt;code&gt;DBClientInterface&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DBClientConnection&lt;/code&gt; is the connection class for connecting to a single MongoDB database server (or mongos)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DBClientReplicaSet&lt;/code&gt; is the connection class for connecting to a replica set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&#34;http://mongodb.github.io/api/1.0.2/&#34;&gt;API documentation&lt;/a&gt; for
details on each of the above classes.&lt;/p&gt;

&lt;h4 id=&#34;a-simple-program-that-connects-to-the-database&#34;&gt;A simple program that connects to the database&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;cstdlib&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;quot;mongo/client/dbclient.h&amp;quot; // for the driver

void run() {
  mongo::DBClientConnection c;
  c.connect(&amp;quot;localhost&amp;quot;);
}

int main() {
    mongo::client::initialize();
    try {
        run();
        std::cout &amp;lt;&amp;lt; &amp;quot;connected ok&amp;quot; &amp;lt;&amp;lt; std::endl;
    } catch( const mongo::DBException &amp;amp;e ) {
        std::cout &amp;lt;&amp;lt; &amp;quot;caught &amp;quot; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    }
    return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note that in a production environment, the return value of &lt;code&gt;mongo::client::initialize()&lt;/code&gt; must be checked)&lt;/p&gt;

&lt;p&gt;If you are using gcc on Linux, you would compile with something like this, depending on location of your include files and libraries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ g++ tutorial.cpp -pthread -lmongoclient -lboost_thread-mt -lboost_system -lboost_regex -o tutorial
$ ./tutorial
connected ok
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Since the tutorial program attempts to connect to a MongoDB database server, you must start it by running mongod before running the tutorial.&lt;/li&gt;
&lt;li&gt;You may need to append -mt to boost_filesystem and boost_program_options. If using a recent boost, -mt is not needed anymore.&lt;/li&gt;
&lt;li&gt;You may need to use -I and -L to specify the locations of your mongo and boost headers and libraries.&lt;/li&gt;
&lt;li&gt;If using the 26compat branch you need to additionally specify &lt;code&gt;-lboost_filesystem&lt;/code&gt; and &lt;code&gt;-lboost_program_options&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bson&#34;&gt;BSON&lt;/h3&gt;

&lt;p&gt;The MongoDB database stores data in BSON format. BSON is a binary object
format that is JSON-like in terms of the data which can be stored (some
extensions exist, for example, a Date datatype).&lt;/p&gt;

&lt;p&gt;To save data in the database we must create objects of class BSONObj. The
components of a BSONObj are represented as BSONElement objects. We use
BSONObjBuilder to make BSON objects, and BSONObjIterator to enumerate BSON
objects.&lt;/p&gt;

&lt;h4 id=&#34;the-c-bson-library&#34;&gt;The C++ BSON Library&lt;/h4&gt;

&lt;p&gt;Include bson/bson.h in your application. See
&lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/blob/legacy/src/mongo/bson/bsondemo/bsondemo.cpp&#34;&gt;bsondemo&lt;/a&gt;
for example usage.&lt;/p&gt;

&lt;h5 id=&#34;key-classes&#34;&gt;Key classes&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;mongo::BSONObj: a BSON object
mongo::BSONElement: a single element in a BSON object. This is a key and a value.
mongo::BSONObjBuilder: used to make BSON objects
mongo::BSONObjIterator: used to enumerate BSON objects
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;working-with-bson&#34;&gt;Working with BSON&lt;/h5&gt;

&lt;p&gt;Let’s now create a BSON “person” object which contains name and age. We might invoke:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObjBuilder b;
b.append(&amp;quot;name&amp;quot;, &amp;quot;Joe&amp;quot;);
b.append(&amp;quot;age&amp;quot;, 33);
BSONObj p = b.obj();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or more concisely:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj p = BSONObjBuilder().append(&amp;quot;name&amp;quot;, &amp;quot;Joe&amp;quot;).append(&amp;quot;age&amp;quot;, 33).obj();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also create BSON objects using the stream oriented syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObjBuilder b;
b &amp;lt;&amp;lt; &amp;quot;name&amp;quot; &amp;lt;&amp;lt; &amp;quot;Joe&amp;quot; &amp;lt;&amp;lt; &amp;quot;age&amp;quot; &amp;lt;&amp;lt; 33;
BSONObj p = b.obj();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The BSON Macro lets us be even more compact:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj p = BSON( &amp;quot;name&amp;quot; &amp;lt;&amp;lt; &amp;quot;Joe&amp;quot; &amp;lt;&amp;lt; &amp;quot;age&amp;quot; &amp;lt;&amp;lt; 33 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the GENOID helper to add an object id to your object. The server will
add an _id automatically if it is not included explicitly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj p = BSON( GENOID &amp;lt;&amp;lt; &amp;quot;name&amp;quot; &amp;lt;&amp;lt; &amp;quot;Joe&amp;quot; &amp;lt;&amp;lt; &amp;quot;age&amp;quot; &amp;lt;&amp;lt; 33 );
// result is: { _id : ..., name : &amp;quot;Joe&amp;quot;, age : 33 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GENOID should be at the beginning of the generated object. We can do something similar with the non-stream builder syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj p = BSONObjBuilder().genOID().append(&amp;quot;name&amp;quot;,&amp;quot;Joe&amp;quot;).append(&amp;quot;age&amp;quot;,33).obj();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other helpers are listed in &lt;a href=&#34;http://mongodb.github.io/docs-cxx/legacy-v1/working-with-bson/&#34;&gt;Working with BSON&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;inserting&#34;&gt;Inserting&lt;/h3&gt;

&lt;p&gt;We now save our person object in a persons collection in the database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;c.insert(&amp;quot;tutorial.persons&amp;quot;, p);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first parameter to insert is the namespace. tutorial is the database and persons is the collection name.&lt;/p&gt;

&lt;h4 id=&#34;getlasterror&#34;&gt;getLastError&lt;/h4&gt;

&lt;p&gt;In order to ensure the write succeeded we need to call getLastError.&lt;/p&gt;

&lt;p&gt;Get error result from the last operation on this connection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;string mongo::DBClientWithCommands::getLastError(); // Empty string if no error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the full last error object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj DBClientWithCommands::getLastErrorDetailed();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For an example, see &lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/blob/legacy/src/mongo/client/examples/simple_client_demo.cpp&#34;&gt;this demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For additional background information on getLastError see the &lt;a href=&#34;http://docs.mongodb.org/manual/core/write-operations/#write-concern&#34;&gt;write
operations documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;count&#34;&gt;Count&lt;/h3&gt;

&lt;p&gt;Let’s now fetch all objects from the persons collection, and display them. We’ll also show here how to use count().&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;cout &amp;lt;&amp;lt; &amp;quot;count:&amp;quot; &amp;lt;&amp;lt; c.count(&amp;quot;tutorial.persons&amp;quot;) &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;query&#34;&gt;Query&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto_ptr&amp;lt;DBClientCursor&amp;gt; cursor = c.query(&amp;quot;tutorial.persons&amp;quot;, BSONObj());

while (cursor-&amp;gt;more())
   cout &amp;lt;&amp;lt; cursor-&amp;gt;next().toString() &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;BSONObj()&lt;/code&gt; is an empty BSON object – it represents &lt;code&gt;{}&lt;/code&gt; which indicates an
empty query pattern (an empty query is a query for all objects).&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;BSONObj::toString()&lt;/code&gt; above to print out information about each
object retrieved. &lt;code&gt;BSONObj::toString&lt;/code&gt; is a diagnostic function which prints
an abbreviated JSON string representation of the object. For full JSON
output, use &lt;code&gt;BSONObj::jsonString&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s now write a function which prints out the name (only) of all persons
in the collection whose age is a given value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void printIfAge(DBClientConnection&amp;amp; c, int age) {
    auto_ptr&amp;lt;DBClientCursor&amp;gt; cursor =
        c.query(&amp;quot;tutorial.persons&amp;quot;, MONGO_QUERY(&amp;quot;age&amp;quot; &amp;lt;&amp;lt; age));
    while (cursor-&amp;gt;more()) {
        BSONObj p = cursor-&amp;gt;next();
        cout &amp;lt;&amp;lt; p.getStringField(&amp;quot;name&amp;quot;) &amp;lt;&amp;lt; endl;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;getStringField()&lt;/code&gt; is a helper that assumes the name field is of type
string. To manipulate an element in a more generic fashion we can retrieve
the particular BSONElement from the enclosing object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONElement name = p[&amp;quot;name&amp;quot;];
// or:
BSONElement name = p.getField(&amp;quot;name&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the api docs, and jsobj.h, for more information.&lt;/p&gt;

&lt;p&gt;Our query above, written as JSON, is of the form&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{ age : &amp;lt;agevalue&amp;gt; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Queries are BSON objects of a particular format – in fact, we could have
used the BSON() macro above instead of MONGO_QUERY(). See class Query in
dbclient.h for more information on Query objects, and the Sorting section
below.&lt;/p&gt;

&lt;p&gt;In the mongo shell (which uses javascript), we could invoke:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;use tutorial;
db.persons.find({age : 33});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;indexing&#34;&gt;Indexing&lt;/h3&gt;

&lt;p&gt;Let’s suppose we want to have an index on age so that our queries are fast. We would use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;c.createIndex(&amp;quot;tutorial.persons&amp;quot;, fromjson(&amp;quot;{age:1}&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example we use a new function, fromjson. fromjson converts a
JSON string to a BSONObj. This is sometimes a convenient way to specify
BSON. Alternatively, we could have written:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;c.createIndex(&amp;quot;tutorial.persons&amp;quot;, BSON( &amp;quot;age&amp;quot; &amp;lt;&amp;lt; 1 ));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While calling createIndex multiple times won&amp;rsquo;t result in duplicate index
creation on the server, it will cause an extra network round-trip and
server operation for each call. It&amp;rsquo;s best practice to use this method
sparingly, for example once at the beginning of your code, or perhaps in an
external setup script that configures the database for your application.
For more information about indexing, see the &lt;a href=&#34;http://docs.mongodb.org/manual/indexes/&#34;&gt;MongoDB Indexing
docs&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;sorting&#34;&gt;Sorting&lt;/h3&gt;

&lt;p&gt;Let’s now make the results from printIfAge sorted alphabetically by name.
To do this, we change the query statement from:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto_ptr&amp;lt;DBClientCursor&amp;gt; cursor = c.query(&amp;quot;tutorial.persons&amp;quot;, MONGO_QUERY(&amp;quot;age&amp;quot; &amp;lt;&amp;lt; age));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto_ptr&amp;lt;DBClientCursor&amp;gt; cursor = c.query(&amp;quot;tutorial.persons&amp;quot;, MONGO_QUERY(&amp;quot;age&amp;quot; &amp;lt;&amp;lt; age ).sort(&amp;quot;name&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have used &lt;code&gt;Query::sort()&lt;/code&gt; to add a modifier to our query expression for sorting.&lt;/p&gt;

&lt;h3 id=&#34;updating&#34;&gt;Updating&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;update()&lt;/code&gt; method to perform a database update. For example the
following update in the mongo shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;gt; use tutorial
&amp;gt; db.persons.update( 
    { name : &#39;Joe&#39;, age : 33 },
    { $inc : { visits : 1 } }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is equivalent to the following C++ code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;db.update(&amp;quot;tutorial.persons&amp;quot;,
    BSON(&amp;quot;name&amp;quot; &amp;lt;&amp;lt; &amp;quot;Joe&amp;quot; &amp;lt;&amp;lt; &amp;quot;age&amp;quot; &amp;lt;&amp;lt; 33),
    BSON(&amp;quot;$inc&amp;quot; &amp;lt;&amp;lt; BSON( &amp;quot;visits&amp;quot; &amp;lt;&amp;lt; 1))
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;update()&lt;/code&gt; method can be used to modify specific fields, replace the
entire existing document, insert new documents or update multiple
documents.  In the MongoDB Manual, examples are provided in the &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/modify-documents/&#34;&gt;Modify
Documents Tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;

&lt;p&gt;A simple example illustrating usage of BSON arrays and the &lt;code&gt;$nin&lt;/code&gt; operator
is available &lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/blob/legacy/src/mongo/client/examples/arrayExample.cpp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;This overview just touches on the basics of using MongoDB from C++. There
are many more capabilities. For further exploration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See the language-independent &lt;a href=&#34;http://docs.mongodb.org/manual/&#34;&gt;MongoDB Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Experiment with the &lt;a href=&#34;http://docs.mongodb.org/manual/mongo/&#34;&gt;mongo shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review the &lt;a href=&#34;http://mongodb.github.io/api/1.0.2&#34;&gt;API docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://mongodb.github.io/docs-cxx/legacy-v1/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>http://mongodb.github.io/docs-cxx/legacy-v1/</guid>
      <description>&lt;p&gt;The legacy C++ driver builds on x86 and x86-64 architectures for Linux, Mac
OS X, Windows, FreeBSD and Solaris.&lt;/p&gt;

&lt;p&gt;The legacy C++ driver library includes a bson package that
implements the BSON specification (see &lt;a href=&#34;http://www.bsonspec.org&#34;&gt;http://www.bsonspec.org&lt;/a&gt;). This
library can be used standalone for object serialization and deserialization
even when one is not using MongoDB at all.&lt;/p&gt;

&lt;p&gt;Releases of legacy drivers have version numbers like v0.x.y and v1.x.y.&lt;/p&gt;

&lt;p&gt;(Note: version numbers like v0.0-26compat-2.x.y refer to a different,
deprecated C++ driver branch.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with BSON</title>
      <link>http://mongodb.github.io/docs-cxx/legacy-v1/working-with-bson/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>http://mongodb.github.io/docs-cxx/legacy-v1/working-with-bson/</guid>
      <description>

&lt;h3 id=&#34;bson-helper-functions&#34;&gt;BSON Helper Functions&lt;/h3&gt;

&lt;p&gt;This is a non-exhaustive list of helper functions for use in the C++ stream
syntax. An exhaustive list is here:
&lt;a href=&#34;https://github.com/mongodb/mongo-cxx-driver/blob/legacy/src/mongo/bson/bsonmisc.h&#34;&gt;bsonmisc.h&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Typical example of stream syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj p = BSON( &amp;quot;name&amp;quot; &amp;lt;&amp;lt; &amp;quot;Joe&amp;quot; &amp;lt;&amp;lt; &amp;quot;age&amp;quot; &amp;lt;&amp;lt; 33 );
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;genoid&#34;&gt;GENOID&lt;/h4&gt;

&lt;p&gt;The server will add an &lt;code&gt;_id&lt;/code&gt; automatically if it is not included explicitly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj p = BSON( GENOID &amp;lt;&amp;lt; &amp;quot;name&amp;quot; &amp;lt;&amp;lt; &amp;quot;Joe&amp;quot; &amp;lt;&amp;lt; &amp;quot;age&amp;quot; &amp;lt;&amp;lt; 33 );
// result is: { _id : ..., name : &amp;quot;Joe&amp;quot;, age : 33 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;lt-gt-lte-gte-ne&#34;&gt;LT, GT, LTE, GTE, NE&lt;/h4&gt;

&lt;p&gt;less than, greater than, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj p = BSON( &amp;quot;age&amp;quot; &amp;lt;&amp;lt; GT &amp;lt;&amp;lt; 21 );
// result is:  { age : { $gt : 21 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;datenow&#34;&gt;DATENOW&lt;/h4&gt;

&lt;p&gt;Translates to current date&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj p = BSON( &amp;quot;created&amp;quot; &amp;lt;&amp;lt; DATENOW );
// result is: { created : &amp;quot;2009-10-09 11:41:42&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;minkey-maxkey&#34;&gt;MINKEY, MAXKEY&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj p = BSON( &amp;quot;a&amp;quot; &amp;lt;&amp;lt; MINKEY);
// result is: { &amp;quot;a&amp;quot; : { &amp;quot;$minKey&amp;quot; : 1 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;or&#34;&gt;OR&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;OR(BSON(&amp;quot;x&amp;quot; &amp;lt;&amp;lt; GT &amp;lt;&amp;lt; 7), BSON(&amp;quot;y&amp;quot; &amp;lt;&amp;lt; LT &amp;lt;&amp;lt; 6))
// result is: {$or: [{x: {$gt: 7}}, {y: {$lt: 6}}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;bsonnull&#34;&gt;BSONNULL&lt;/h4&gt;

&lt;p&gt;Translates to &lt;code&gt;null&lt;/code&gt; value (will appear in MongoDB 2.1)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BSONObj p = BSON( &amp;quot;name&amp;quot; &amp;lt;&amp;lt; &amp;quot;Methuselah&amp;quot; &amp;lt;&amp;lt; &amp;quot;age&amp;quot; &amp;lt;&amp;lt; BSONNULL );
// result is: { name : &amp;quot;Methuselah&amp;quot;, age : null }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>